/*
Define a class Matrix<T> to hold a matrix of numbers (e.g. integers, floats, decimals). 
Implement an indexer this[row, col] to access the inner matrix cells.
Implement the operators + and - (addition and subtraction of matrices of the same size) and * for matrix multiplication. 
Throw an exception when the operation cannot be performed. Implement the true operator (check for non-zero elements).
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Matrix
{
    class Matrix<T> where T : struct, IComparable, IFormattable, IConvertible, IComparable<T>, IEquatable<T>
    {
        private int rows;
        private int cols;
        private T[,] matrix;

        public Matrix(int rows, int cols)
        {
            this.rows = rows;
            this.cols = cols;
            this.matrix = new T[rows, cols];
        }

        public int Rows
        {
            get { return this.rows; }
            set
            {
                if (value > 0 && value <= int.MaxValue)
                {
                    this.rows = value;
                }
                else
                {
                    throw new ArgumentOutOfRangeException("Out of range.");
                }
            }
        }

        public int Cols
        {
            get { return this.cols; }
            set
            {
                if (value > 0 && value <= int.MaxValue)
                {
                    this.cols = value;
                }
                else
                {
                    throw new ArgumentOutOfRangeException("Out of range.");
                }
            }
        }

        public T this[int row, int col]
        {
            get
            {
                if (row <= this.rows && col <= this.cols)
                {
                    return matrix[row, col];
                }
                else
                {
                    throw new IndexOutOfRangeException("Out of range.");
                }
            }
            set
            {
                if (row <= this.rows && col <= this.cols)
                {
                    this.matrix[row, col] = value;
                }
                else
                {
                    throw new IndexOutOfRangeException("Index Out Of Range Exception!");
                }
            }
        }

        public static Matrix<T> operator +(Matrix<T> firstMatrix, Matrix<T> secondMatrix)
        {
            int firstMatrixRows = firstMatrix.rows;
            int firstMatrixCols = firstMatrix.cols;
            int secondMatrixRows = secondMatrix.rows;
            int secondMatrixCols = secondMatrix.cols;

            Matrix<T> sumMatrix = new Matrix<T>(firstMatrixRows, firstMatrixCols);
            if (firstMatrixCols == secondMatrixCols && firstMatrixRows == secondMatrixRows)
            {
                for (int i = 0; i < firstMatrixRows; i++)
                {
                    for (int j = 0; j < firstMatrixCols; j++)
                    {
                        sumMatrix[i, j] = (dynamic)firstMatrix[i, j] + (dynamic)secondMatrix[i, j];
                    }
                }
            }
            else
            {
                throw new ArgumentException();
            }
            return sumMatrix;
        }
        
        public static Matrix<T> operator -(Matrix<T> firstMatrix, Matrix<T> secondMatrix)
        {
            int firstMatrixRows = firstMatrix.rows;
            int firstMatrixCols = firstMatrix.cols;
            int secondMatrixRows = secondMatrix.rows;
            int secondMatrixCols = secondMatrix.cols;

            Matrix<T> sumMatrix = new Matrix<T>(firstMatrixRows, firstMatrixCols);
            if (firstMatrixCols == secondMatrixCols && firstMatrixRows == secondMatrixRows)
            {
                for (int i = 0; i < firstMatrixRows; i++)
                {
                    for (int j = 0; j < firstMatrixCols; j++)
                    {
                        sumMatrix[i, j] = (dynamic)firstMatrix[i, j] - (dynamic)secondMatrix[i, j];
                    }
                }
            }
            else
            {
                throw new ArgumentException();
            }
            return sumMatrix;
        }

        public static Matrix<T> operator *(Matrix<T> firstMatrix, Matrix<T> secondMatrix)
        {
            int firstMatrixRows = firstMatrix.rows;
            int firstMatrixCols = firstMatrix.cols;
            int secondMatrixRows = secondMatrix.rows;
            int secondMatrixCols = secondMatrix.cols;

            if (firstMatrixCols == secondMatrixRows && (firstMatrixRows > 0 && secondMatrixCols > 0 && firstMatrixCols > 0))
            {
                Matrix<T> result = new Matrix<T>(firstMatrixRows, secondMatrixCols);
                for (int i = 0; i < firstMatrixRows; i++)
                {
                    for (int j = 0; j < secondMatrixCols; j++)
                    {
                        dynamic sum = 0;
                        for (int k = 0; k < secondMatrixCols + 1; k++)
                        {
                            sum += (dynamic)firstMatrix[i, k] * (dynamic)secondMatrix[k, j];
                        }
                        result.matrix[i, j] = sum;
                    }
                }
                return result;
            }
            else
            {
                throw new ArgumentException();
            }
        }
       
        public static bool operator true(Matrix<T> matrix)
        {
            for (int i = 0; i < matrix.rows; i++)
            {
                for (int j = 0; j < matrix.cols; j++)
                {
                    if ((dynamic)matrix[i, j] == 0)
                    {
                        return false;
                    }
                }
            }
            return true;
        }
        
        public static bool operator false(Matrix<T> matrix)
        {
            for (int i = 0; i < matrix.rows; i++)
            {
                for (int j = 0; j < matrix.cols; j++)
                {
                    if ((dynamic)matrix[i, j] == 0)
                    {
                        return false;
                    }
                }
            }
            return true;
        }
    }
    class Program
    {
        static void Main()
        {
            Matrix<int> m1 = new Matrix<int>(4, 3);
            Matrix<int> m2 = new Matrix<int>(3, 2);

            m1[0, 0] = 1;
            m1[0, 1] = 2;
            m1[0, 2] = 3;
            m1[1, 0] = 0;
            m1[1, 1] = 1;
            m1[1, 2] = 2;
            m1[2, 0] = 1;
            m1[2, 1] = -3;
            m1[2, 2] = 1;
            m1[3, 0] = 5;
            m1[3, 1] = -3;
            m1[3, 2] = 1;

            m2[0, 0] = 1;
            m2[0, 1] = 2;
            m2[1, 0] = -1;
            m2[1, 1] = 10;
            m2[2, 0] = 5;
            m2[2, 1] = 2;
            Console.WriteLine("The first matrix is:");
            for (int row = 0; row < m1.Rows; row++)
            {
                for (int col = 0; col < m1.Cols; col++)
                {
                    Console.Write("{0,3} ", m1[row, col]);
                }
                Console.WriteLine();
            }
            Console.WriteLine();
            Console.WriteLine("The second matrix is:");
            for (int row = 0; row < m2.Rows; row++)
            {
                for (int col = 0; col < m2.Cols; col++)
                {
                    Console.Write("{0,3} ", m2[row, col]);
                }
                Console.WriteLine();
            }
            Console.WriteLine();
            Console.WriteLine("Matrix1 * Matrix2 is:");
            Matrix<int> newMatrix = new Matrix<int>(m1.Rows, m2.Cols);
            newMatrix = m1 * m2;
            for (int row = 0; row < newMatrix.Rows; row++)
            {
                for (int col = 0; col < newMatrix.Cols; col++)
                {
                    Console.Write("{0,3} ", newMatrix[row, col]);
                }
                Console.WriteLine();
            }
            Console.WriteLine();
            Console.Write("The matrix2 exists: ");
            if (m2)
            {
                Console.WriteLine("True");
            }
            else
            {
                Console.WriteLine("False");
            }

        }
    }
}
